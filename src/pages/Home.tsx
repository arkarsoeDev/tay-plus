import { Box, CircularProgress } from "@mui/material";
import MovieInfo from "../components/MovieInfo";
import SubMenu from "../components/SubMenu";
import full_logo from "../assets/images/iptv-full-logo.png";
import { useOutletContext } from "react-router-dom";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import type { AppDispatch } from "../store";
import {
  getTrendingMovies,
  getMovieHomeLayout,
  getOriginMovies,
  getGenreMovies,
  getLanguageMovies,
  getTagMovies,
  getMovieDetail,
} from "../store/moviesSlice";
import PreviewThumbnail from "../components/PreviewThumbnail";
import MovieBanner from "../components/MovieBanner";

type LayoutContext = [
  number,
  React.Dispatch<React.SetStateAction<number>>,
  number,
  React.Dispatch<React.SetStateAction<number>>,
  any, // selectedParentOrigin is of type any, not SubMenuItem
  any, // selectedParentOrigin is of type any, not SubMenuItem
  any, // selectedParentOrigin is of type any, not SubMenuItem
  boolean // isMobileLandscape
];

const HomePage = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [
    activeImage,
    setActiveImage,
    activeTab,
    setActiveTab,
    _selectedParentOrigin,
    _setSelectedChildOrigin,
    _selectedChildOrigin,
    isMobileLandscape,] =
    useOutletContext<LayoutContext>();

  const sideBarMenuItems = [
    { name: "Trending", url: "/trending" },
    { name: "New Arrival", url: "/new-arrival" },
    { name: "Saved Movies", url: "/saved-movies" },
  ];

  const { movie_detail } = useSelector((state: any) => state.movies);

  const [showAllMovies, setShowAllMovies] = useState<any>([]);
  const [filteredMovies, setFilteredMovies] = useState<any>([]);
  const [lastFetchedId, setLastFetchedId] = useState<number | null>(null);

  // Fetch movie list on location change
  useEffect(() => {
    dispatch(getMovieHomeLayout()).then(async (res) => {
      const layout = res.payload.data.layout;
      const moviesAccumulator: any[] = [];

      for (const item of layout) {
        let response: any;
        // if (item.category_type === "AutoGenerated" && item.category === "Continue Watching") {
        //   response = await dispatch(watchingMovies());
        //   moviesAccumulator.push(...response.payload.data);
        // }
        // else
        if (
          item.category_type === "AutoGenerated" &&
          item.category === "Tranding"
        ) {
          response = await dispatch(getTrendingMovies({ limit: item.limit }));
          moviesAccumulator.push(...response.payload.data.trending_movies);
        } else if (item.category_type === "Origin") {
          response = await dispatch(
            getOriginMovies({ origin_id: item.category, limit: item.limit })
          );
          moviesAccumulator.push(
            ...Object.values(response.payload.data.movies || {}).flat()
          );
        } else if (item.category_type === "Genre") {
          response = await dispatch(
            getGenreMovies({ genre_id: item.category, limit: item.limit })
          );
          moviesAccumulator.push(
            ...Object.values(response.payload.data.movies || {}).flat()
          );
        } else if (item.category_type === "Language") {
          response = await dispatch(
            getLanguageMovies({ language_id: item.category, limit: item.limit })
          );
          moviesAccumulator.push(
            ...Object.values(response.payload.data.movies || {}).flat()
          );
        } else if (item.category_type === "Tag") {
          response = await dispatch(
            getTagMovies({ tag_id: item.category, limit: item.limit })
          );
          moviesAccumulator.push(
            ...Object.values(response.payload.data.movies || {}).flat()
          );
        }
      }
      setShowAllMovies(moviesAccumulator);
    });
  }, []);

  useEffect(() => {
    const filtered = Array.from(
      new Map(
        showAllMovies
          .filter((item: any) => item != null)
          .map((item: any) => [item.id, item])
      ).values()
    );
    setFilteredMovies(filtered);
  }, [showAllMovies]);

  useEffect(() => {
    const firstId = filteredMovies[0]?.id;
    if (firstId && firstId !== lastFetchedId) {
      dispatch(getMovieDetail(firstId));
      setLastFetchedId(firstId);
    } else if (activeImage && !isNaN(Number(activeImage))) {
      dispatch(getMovieDetail(activeImage));
    }
  }, [filteredMovies, dispatch, lastFetchedId, activeImage]);

  // Loading fallback
  if (filteredMovies.length === 0 || Object.keys(movie_detail).length === 0) {
    return (
      <Box
        width='100%'
        height='100vh'
        display='flex'
        justifyContent='center'
        alignItems='center'>
        <CircularProgress sx={{ color: "#A05070" }} size={50} />
      </Box>
    );
  }

  return (
    <Box
      sx={{
        aspectRatio: isMobileLandscape ? "auto" : "16/9",
        width: isMobileLandscape
          ? "calc(100vw - 140px)"
          : "calc(100vw - 280px)",
        height: isMobileLandscape ? "100vh" : "auto", // optional fix
        position: "relative",
        overflow: "hidden", // ensures no scrollbars
      }}>
      <img
        src={full_logo}
        width={isMobileLandscape ? 80 : 128}
        style={{
          position: "absolute",
          top: isMobileLandscape ? 10 : 20,
          left: isMobileLandscape ? 20 : 41,
          zIndex: 2,
        }}
      />
      <MovieBanner
        mainImage={movie_detail?.posters[1]?.poster_cdn_url}
        movieDetail={movie_detail}
      />
      <Box
        sx={{
          background:
            "linear-gradient(180deg, rgba(12, 12, 43, 0) 0%, #0C0C2B 76.5%)",
          position: "absolute",
          zIndex: 1,
          bottom: "18%",
          width: "100%",
          height: "50%",
          backgroundRepeat: "no-repeat",
        }}
      />
      <Box
        width={isMobileLandscape ? "calc(100% - 20px)" : "calc(100% - 26px)"}
        position='absolute'
        bottom={isMobileLandscape ? 60 : 100}
        left={isMobileLandscape ? 20 : 26}
        zIndex={9}>
        <MovieInfo
          movie_detail={movie_detail}
          onWatchedProgressSaved={() => { }}
          isMobileLandscape={isMobileLandscape}
        />
        <PreviewThumbnail
          activeImage={
            !isNaN(Number(activeImage)) ? activeImage : filteredMovies[0]?.id
          }
          setActiveImage={setActiveImage}
          suggestedItems={filteredMovies}
          isMobileLandscape={isMobileLandscape}
        />
      </Box>
      <SubMenu
        sideBarMenuItems={sideBarMenuItems}
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        isMobileLandscape={isMobileLandscape}
      />
    </Box>
  );
};

export default HomePage;
